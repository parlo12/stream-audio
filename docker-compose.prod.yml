# Working docker-compose.prod.yml for your external database setup
version: "3.9"

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: always
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    restart: always
    env_file: .env
    environment:
      GIN_MODE: "release"
      DB_SSLMODE: "${DB_SSLMODE:-require}"
      PGSSLMODE: "${PGSSLMODE:-require}"
      LOG_LEVEL: "info"
      # Use your external DigitalOcean database
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: "${JWT_SECRET}"
      STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
    depends_on:
      redis:
        condition: service_healthy
    ports: ["8082:8082"]
    volumes:
      - content-audio:/app/audio
      - content-covers:/app/uploads/covers
      - ./logs/auth:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Content Service
  content-service:
    build:
      context: .
      dockerfile: content-service/Dockerfile
    restart: always
    env_file: .env
    environment:
      GIN_MODE: "release"
      DB_SSLMODE: "${DB_SSLMODE:-require}"
      PGSSLMODE: "${PGSSLMODE:-require}"
      AUTH_SERVICE_URL: "${AUTH_SERVICE_URL}"
      LOG_LEVEL: "info"
      AUDIO_STORAGE_PATH: "/app/audio"
      # Use your external DigitalOcean database
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      REDIS_URL: "redis://redis:6379"
      # Your MQTT configuration
      MQTT_BROKER: "${MQTT_BROKER}"
      MQTT_USERNAME: "${MQTT_USERNAME}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      # API Keys
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      XI_API_KEY: "${XI_API_KEY}"
      ELEVENLABS_VOICE_ID: "${ELEVENLABS_VOICE_ID}"
      MAX_FILE_SIZE: "50MB"
      UPLOAD_PATH: "/app/uploads"
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
    ports: 
      - "8083:8083"
      - "8084:8084"
    volumes:
      - content-audio-persistent:/app/audio
      - content-covers-persistent:/app/uploads/covers
      - content-uploads:/app/uploads
      - ./logs/content:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  # Redis persistence
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stream-audio-data/redis

  # Your existing volumes
  content-audio:
  content-covers:
  
  # New persistent volumes
  content-audio-persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stream-audio-data/audio
  content-covers-persistent:
    driver: local  
    driver_opts:
      type: none
      o: bind
      device: /opt/stream-audio-data/covers
  content-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stream-audio-data/uploads

networks:
  default:
    name: stream-audio-network